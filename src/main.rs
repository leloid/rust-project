mod station;
mod resources;
mod config;
mod map;
use map::Map;
use map::Cell;

mod robot;
use robot::{Robot, Direction, RobotRole};
use std::collections::HashSet;
use config::{MAP_WIDTH, MAP_HEIGHT, SEED};

use station::Station;

fn main() {
    let seed = 42;
    let mut map = Map::new(MAP_WIDTH, MAP_HEIGHT, SEED);

    // Cr√©ation de la station
    let station_x = 5;
    let station_y = 3;
    map.place_station(station_x, station_y);  // Ensure station position is empty
    let mut station = Station::new(station_x, station_y);

    // Cr√©ation des robots
    let mut robots = vec![
        Robot::new(5, 3, Direction::East, RobotRole::Explorer),
        // Robot::new(1, 1, Direction::North, RobotRole::Explorer),
        // Robot::new(1, 3, Direction::East, RobotRole::Explorer),
    ];

    println!("üéÆ Carte initiale avec brouillard de guerre");
    map.display_with_fog(&robots, station_x, station_y, &station);

    // Simulation de plusieurs ticks
    for tick in 1..=15 {
        println!("=====================");
        println!("\nüöÄ Tick {} : exploration en cours !", tick);

        for (i, robot) in robots.iter_mut().enumerate() {
            println!("ü§ñ Robot #{} ({:?}) en position ({}, {})", i, robot.role, robot.x, robot.y);
            robot.act(&mut map, station_x, station_y, &station);
        }

        // Affichage de la carte apr√®s chaque tick
        println!("\nüó∫Ô∏è Carte apr√®s Tick {} :", tick);
        map.display_with_fog(&robots, station_x, station_y, &station);
    }

    // ‚ö° Synchronisation finale avec la station
    for robot in &mut robots {
        station.receive_data(robot.discovered.drain(..).collect());
    }

    // ‚úÖ Affichage des infos finales station + robots
    println!("\nüì° Exploration termin√©e !");
    for (i, robot) in robots.iter().enumerate() {
        println!("üìä Robot #{} ({:?})", i, robot.role);
        println!("   üìç Position finale : ({}, {})", robot.x, robot.y);
    }

    // üì¶ Infos fusionn√©es √† la station
    println!("\nüè† Station - Donn√©es fusionn√©es :");
    println!("   üß† D√©couvertes scientifiques : {}", station.scientific_discoveries);
    println!("   üîç Zones explor√©es (total unique) : {}", station.discovered.len());
    println!("   ü§ñ Robots cr√©√©s au total : {}", station.robots_created);
}
